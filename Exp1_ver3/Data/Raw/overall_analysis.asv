clear all;
close all;

    % RESULT TEXT FILE
    %1 trialnumver 
    %2 condition
    %3 stimuli face
    %4 testface
    %5 result
    %6 isBreakTrials
    %7 which staircase is used
    %8-11 where does it break
    %12-15 threshold presented

singleOutlierStd= 2; 
overallOutlierStd = 2;

files = dir( 'Ensem_result_*.txt');
subjectNum = length(files);

data_raw = cell(subjectNum,5,16);
data_normed_byFace = cell(subjectNum,5,16);
data_normed_byIden = cell(subjectNum,5,16);

avg_raw = zeros(subjectNum,5,4);
avg_normed_byIden = zeros(subjectNum,5,4);
avg_normed_byFace = zeros(subjectNum,5,4);

%===== Read in data & Exclude Outlier======%

    % exclude outlier based on subject's own std
    raw_byFace_forOutlierDetection = cell(16);
    for subject = 1:subjectNum
        [trial cond ensFace testFace judgement Break stairCase s1 s2 s3 s4 t1 t2 t3 t4]= textread(files(subject).name,'%d %d %d %d %d %d %d %d %d %d %d %f %f %f %f');
        dataPerSubject_byFace = cell(16);
        after_dataPerSubject = cell(16);
        for i=1:length(trial)
            if ~Break(i)
                dataPerSubject_byFace{testFace(i)}(end+1) = judgement(i);
            end
        end
        
        outlier_low = zeros(16);
        outlier_high = zeros(16);
        for i = 1:16
            outlier_low(i) = mean(dataPerSubject_byFace{i}) - singleOutlierStd * std(dataPerSubject_byFace{i});
            outlier_high(i) = mean(dataPerSubject_byFace{i}) + singleOutlierStd * std(dataPerSubject_byFace{i});
        end
       
        for i=1:length(trial)
            if ~Break(i) && judgement(i)> outlier_low(testFace(i)) && judgement(i) < outlier_high(testFace(i))
                raw_byFace_forOutlierDetection{testFace(i)}(end+1) = judgement(i);
            end
        end
    end
    
    % exclude outlier based on overall distribution
    for i=1:16
        upperbound(i) = mean(raw_byFace_forOutlierDetection{i}) + overallOutlierStd *std(raw_byFace_forOutlierDetection{i});
        lowerbound(i) = mean(raw_byFace_forOutlierDetection{i}) - overallOutlierStd *std(raw_byFace_forOutlierDetection{i});
    end

    for subject = 1:subjectNum
        for i=1:length(trial)
            isOutlier = judgement(i)>upperbound(testFace(i)) || judgement(i)<lowerbound(testFace(i));
            if ~Break(i) && ~isOutlier
                data_raw{subject,cond(i),testFace(i)}(end+1) = judgement(i);
            end
        end
    end
    
% ======== Draw Overall Distribution Chart==== %      
        figure
        for j = 1:16
        x_dis = -10:10;
        y_dis = zeros(21);
        for i = 1:length(raw_byFace_forOutlierDetection{j})
            iden = raw_byFace_forOutlierDetection{j}(i) +11;
            y_dis(iden) = y_dis(iden)+1;
        end
        subplot(4,4,j)
            plot(x_dis,y_dis);
            axis([-10,10,0,50]);
            stat = {['mean:' num2str(mean(raw_byFace_forOutlierDetection{j})) '  std:' num2str(std(raw_byFace_forOutlierDetection{j}))]};
            text(-8,45,stat);
            text(upperbound(j),5,'|');
            text(lowerbound(j),5,'|');
            ylabel('counts');
            xlabel('emotion score');
            title(['face No.' num2str(j) ]);

        end
    
%======Normalized Data By Identity ========%

    % get average & std for each identity

    for identity = 1:4
        temp = [];
        for face = 4*identity-3 : 4*identity
            for subject = 1:subjectNum
                for ensum = 1:5
                    for i = 1:length(data_raw{subject,ensum,face})
                    temp(end+1) = data_raw{subject,ensum,face}(i); end
                end
            end
        end
        avg_iden(identity) = nanmean(temp);
        std_iden(identity) = nanstd(temp);
    end

    % nomalization
    for face = 1:16
        if face >= 1 && face <= 4 iden = 1; end
        if face >= 5 && face <= 8 iden = 2; end
        if face >= 9 && face <= 12 iden = 3; end
        if face >= 13 && face <= 16 iden = 4; end

            for subject = 1:subjectNum
                for ensum = 1:5
                    for i = 1:length(data_raw{subject,ensum,face})
                    data_normed_byIden{subject,ensum,face}(i) = (data_raw{subject,ensum,face}-avg_iden(iden)) / std_iden(iden); end
                end
            end
    end

%======Normalized Data By Face ========%

% get average & std for each identity
    avg_face = [];
    std_face = [];
    for subject = 1:subjectNum
        for face = 1:16
            temp = [];
            for ensum = 1:5
                for i = 1:length(data_raw{subject,ensum,face})
                temp(end+1) = data_raw{subject,ensum,face}(i); end
            end
            avg_face(face) = nanmean(temp);
            std_face(face) = nanstd(temp);
        end
    end

    % nomalization
    for face = 1:16
        if face >= 1 && face <= 4 iden = 1; end
        if face >= 5 && face <= 8 iden = 2; end
        if face >= 9 && face <= 12 iden = 3; end
        if face >= 13 && face <= 16 iden = 4; end

            for subject = 1:subjectNum
                for ensum = 1:5
                    for i = 1:length(data_raw{subject,ensum,face})
                    data_normed_byIden{subject,ensum,face}(i) = (data_raw{subject,ensum,face}-avg_iden(iden)) / std_iden(iden); end
                end
            end
    end
    
    
    %==== Get Mean ====%
    
    % average_normed_byIdentity
    for emotion = 1:4
        for subject = 1:subjectNum
            for ensum = 1:5

                temp = [
                mean(data_normed_byIden{subject,ensum,emotion*4}) 
                mean(data_normed_byIden{subject,ensum,emotion*4-1}) 
                mean(data_normed_byIden{subject,ensum,emotion*4-2}) 
                mean(data_normed_byIden{subject,ensum,emotion*4-3})
                ];
                avg_normed_byIden(subject,ensum,emotion) = mean(temp);
            end
        end
    end

